<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playerName = myName;
playerCreated = false;
hasServer = false;
socketID = 666;

namesList = ds_list_create();
socketList = ds_list_create();
clientMap = ds_map_create();

map_Names = ds_map_create();
map_Head  = ds_map_create();
map_Torso = ds_map_create();
map_Legs  = ds_map_create();

// Pre Game Maps
map_PreGame_Characters = ds_map_create();
map_PreGame_InitialRolls = ds_map_create();

buffer = buffer_create(256, buffer_grow, 1);
client = network_create_socket(network_socket_tcp);

var err = network_connect(client, connectIP, connectPort);
if(err != 0)
{
    if(!instance_exists(obj_Message_Generic_NoOptions)) 
    { 
        with(instance_create(0,0,obj_Message_Generic_NoOptions))
        {
            str_Title = "CONNECTION ERROR";
            str_Info  = "The CLIENT could not connect to the SERVER. Please
                        #try again later. Sorry for the shitty programming
                        #skills showcased in this excellent error!";
            state = "Load Main Menu"; 
        }
    }
}

// Send initial Client details to Server
buffer_seek(buffer, buffer_seek_start, 0);
buffer_write(buffer, buffer_string, "To Server");
buffer_write(buffer, buffer_string, "Get Player Info");
buffer_write(buffer, buffer_string, playerName);
buffer_write(buffer, buffer_string, currentHead);
buffer_write(buffer, buffer_string, currentTorso);
buffer_write(buffer, buffer_string, currentLegs);
network_send_packet(client, buffer, buffer_tell(buffer));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load Client into the Pre-Game!

// Go To PreStage Menu
room_goto(rm_Menu_PreStage);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Networking code
var eventid = ds_map_find_value(async_load, "id");
var eventType = ds_map_find_value(async_load, "type");

//if(client == eventid)
switch(eventType)
{
    case network_type_connect: // INCOMING CONNECTION
    break;
    
    case network_type_disconnect: // INCOMING DISCONNECTION
    break;
    
    case network_type_data: // INCOMING DATA
        scr_Client_ReceiveData(ds_map_find_value(async_load, "buffer"));
    break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(instance_exists(obj_Player)) { with(obj_Player) instance_destroy(); }

/*buffer_seek(buffer, buffer_seek_start, 0);
buffer_write(buffer, buffer_string, "Delete Me");
buffer_write(buffer, buffer_string, playerName);
network_send_packet(client, buffer, buffer_tell(buffer));

network_destroy(client);
buffer_delete(buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_right);
draw_set_valign(fa_bottom);
draw_set_color(c_black);

if(currentlyInGame == false)
{
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);

    // draw_text(10,10,playerName);
}
else
{
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_color(c_white);

    //draw_text(view_xview[0]+10,view_yview[0]+10,playerName);
}


// Draw Client
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(make_colour_rgb(25,255,25));
draw_text(view_xview[0]+10,view_yview[0]+10,string(myName) + " ("+string(client) + ")");
//draw_text(view_xview[0]+view_wview[0]/2,view_yview[0]+view_hview[0]-60,"CLIENT: "+string(client)+"/"+string(socketID));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
