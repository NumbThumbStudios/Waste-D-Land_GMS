<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>serverList  = ds_list_create();
serverNames = ds_list_create();
serverObjs  = ds_list_create();
serverClientsConnected = ds_list_create();


// Create a server and listen on our broadcast port....
global.broadcastServer = network_create_server( network_socket_udp, broadcastPort, maxServersBroadcast);
if(global.broadcastServer &lt; 0)
{
    show_debug_message("Cannot create broadcast server.");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UDP server code - Detect servers "broadcast"

var eventid = ds_map_find_value(async_load, "id");

if(eventid == global.broadcastServer)
{   
    var ip = ds_map_find_value(async_load, "ip");
    
    var buff = ds_map_find_value(async_load, "buffer");
    
    var to = buffer_read(buff, buffer_string);
    if(to != "To Broadcast") { exit; }
    
    name = buffer_read(buff, buffer_string);

    if(name == "Delete Me")
    {
        var sName = buffer_read(buff, buffer_string);
        ds_list_delete(serverList, ds_list_find_index(serverList, ip));
        ds_list_delete(serverNames, ds_list_find_index(serverNames, sName));
        
        scr_JoinMenu_DestroyServerList();
        scr_JoinMenu_ReBuildServerList();
    }
    else
    {
        var cCount = buffer_read(buff, buffer_u8);
        var isBusy = buffer_read(buff, buffer_bool);

        scr_JoinMenu_BuildServerList(string(name), string(ip), cCount, isBusy);
    }
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw server list

var count = ds_list_size(serverList);
if(count &lt;= 0)
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_font(ft_Menu_JoinMenu_NoServers);
    draw_set_color(make_colour_rgb(22,22,22));
    
    draw_text(view_xview[0]+view_wview[0]/2,view_yview[0]+view_hview[0]/2,"NO SERVERS FOUND");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
