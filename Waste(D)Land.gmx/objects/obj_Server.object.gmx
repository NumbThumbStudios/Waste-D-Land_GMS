<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initial Server Setup
networkType = network_socket_tcp;
ipAddress = 0;
playerCreated = false;
currentlyInGame = false;

myServerName = myName+"'s server";;

socketList = ds_list_create();
namesList  = ds_list_create();
clientMap  = ds_map_create();
namesMap   = ds_map_create();
map_Names  = ds_map_create();
map_Head   = ds_map_create();
map_Torso  = ds_map_create();
map_Legs   = ds_map_create();

// Pre Game Maps
map_PreGame_Characters = ds_map_create();
map_PreGame_InitialRolls = ds_map_create();
list_PreGame_InitialRolls = ds_list_create();

// Pre Game Grid
grid_PreGame = ds_grid_create(ds_map_size(clientMap),ds_map_size(clientMap));

buffer = buffer_create(256, buffer_grow, 1);
broadcastBuffer = buffer_create(256, buffer_grow, 1);

network_set_config(network_config_connect_timeout, 1000);

globalvar server;
server = network_create_server(networkType, connectPort, maxClients);

// IF there is an error...
if(server &lt; 0)
{
    // NEW CODE HERE
    if(!instance_exists(obj_Message_Generic_NoOptions)) 
    { 
        with(instance_create(0,0,obj_Message_Generic_NoOptions))
        {
            str_Title = "NETWORK ERROR";
            str_Info  = "For some strange fuckin' reason involving the lack of
                        #skills by our one man programming team, we could not
                        #create a SERVER. You could try to change the PORT
                        #from within the SETTINGS menu located on the Main Menu.";
            state = "Load Play Options Menu"; 
        }
    }
    
    with(self) instance_destroy();
}
else
{
    alarm[0] = room_speed;
    
    if(instance_exists(obj_Client)) with(obj_Client) instance_destroy();
    c = instance_create(0,0,obj_Client);
    c.hasServer = true;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Networking Objects

for(var i = 0; i &lt; ds_list_size(socketList); i ++)
{
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_string, "To Client");
    buffer_write(buffer, buffer_string, "Server Ended");
    network_send_packet(ds_list_find_value(socketList, i), buffer, buffer_tell(buffer));
}

buffer_seek(broadcastBuffer, buffer_seek_start, 0);
buffer_write(broadcastBuffer, buffer_string, "To Broadcast");
buffer_write(broadcastBuffer, buffer_string, "Delete Me");
buffer_write(broadcastBuffer, buffer_string, myServerName);
network_send_broadcast(server, 17421, broadcastBuffer, buffer_tell(broadcastBuffer));

buffer_delete(buffer);
buffer_delete(broadcastBuffer);
ds_map_destroy(clientMap);
ds_list_destroy(socketList);
network_destroy(server);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Broadcast our location occasionally. Clients pick this up and can then display servers to the user. 
buffer_seek(broadcastBuffer, buffer_seek_start, 0);
buffer_write(broadcastBuffer, buffer_string, "To Broadcast");
buffer_write(broadcastBuffer, buffer_string, myServerName);
buffer_write(broadcastBuffer, buffer_u8, ds_list_size(socketList));
buffer_write(broadcastBuffer, buffer_bool, currentlyInGame);
network_send_broadcast(server, broadcastPort, broadcastBuffer, buffer_tell(broadcastBuffer));

// Broadcast once a second...
alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Networking code
var eventType = ds_map_find_value(async_load, "type");
var eventid   = ds_map_find_value(async_load, "id");
ipAddress = ds_map_find_value(async_load, "ip");
connectIP = ipAddress;

switch(eventType)
{   
    case network_type_connect: // INCOMING CONNECTION
        scr_Server_Connect();
    break;
    
    case network_type_disconnect: // INCOMING DISCONNECTION
        scr_Server_Disconnect();
    break;
    
    case network_type_data: // INCOMING DATA
        //show_message("SERVER BUFF: "+string(ds_map_find_value(async_load, "buffer")));
        scr_Server_ReceiveData(ds_map_find_value(async_load, "buffer"));
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Networking Objects

for(var i = 0; i &lt; ds_list_size(socketList); i ++)
{
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_string, "To Client");
    buffer_write(buffer, buffer_string, "Server Ended");
    network_send_packet(ds_list_find_value(socketList, i), buffer, buffer_tell(buffer));
}

buffer_seek(broadcastBuffer, buffer_seek_start, 0);
buffer_write(broadcastBuffer, buffer_string, "To Broadcast");
buffer_write(broadcastBuffer, buffer_string, "Delete Me");
buffer_write(broadcastBuffer, buffer_string, myServerName);
network_send_broadcast(server, broadcastPort, broadcastBuffer, buffer_tell(broadcastBuffer));

buffer_delete(buffer);
buffer_delete(broadcastBuffer);
ds_map_destroy(clientMap);
ds_list_destroy(socketList);
network_destroy(server);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_right);
draw_set_valign(fa_bottom);
draw_set_color(c_black);
//draw_text(view_xview[0]+view_wview[0]-4,view_yview[0]+view_hview[0]-4,"PLAYERS: "+string(ds_list_size(socketList))+"/4)");

draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_color(make_colour_rgb(25,255,25));
//draw_text(view_xview[0]+view_wview[0]/2,view_yview[0]+view_hview[0]-30,"SERVER: "+string(server));




//draw_set_alpha(1);
//draw_set_halign(fa_center); draw_set_valign(fa_bottom); draw_set_color(c_lime);
//draw_text(view_xview[0]+view_wview[0]/2, view_yview[0]+view_hview[0]-24,"SERVER - LIVE");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
