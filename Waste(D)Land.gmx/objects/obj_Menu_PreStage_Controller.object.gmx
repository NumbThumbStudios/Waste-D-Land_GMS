<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-12</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initial vars

initX   = 200;
initY   = 1000;
offsetX = 220;
offsetY = 120;
numberOfPlayers = 0;

curName  = "";
curHead  = spr_Head_Punker01_Idle;
curTorso = spr_Torso_Naked_Idle;
curLegs  = spr_Legs_Punker01_Idle;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create PreGame Characters

if(instance_exists(obj_Client))
{
    for(var i = 0; i &lt; ds_list_size(obj_Client.socketList); i ++)
    {
        var xx = initX + (i * offsetX);
        var yy = initY;
        if(i % 2 != 0) { yy -= offsetY; }
        
        var sock = ds_list_find_value(obj_Client.socketList, i);
        var n = ds_map_find_value(obj_Client.map_Names, sock);
        var h = ds_map_find_value(obj_Client.map_Head, sock);
        var t = ds_map_find_value(obj_Client.map_Torso, sock);
        var l = ds_map_find_value(obj_Client.map_Legs, sock);
        
        with(instance_create(xx,yy,obj_Menu_PreStage_Character))
        {
            mySock = sock;
            cName = n;
            cHead = h;
            cTorso = t;
            cLegs = l;
            myDice = instance_create(xx,yy-180,obj_Menu_PreStage_Dice);
            
            ds_map_add(obj_Client.map_PreGame_Characters, sock, self);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load Next Room / Create Players

with(obj_Server)
{
    // Send data to all Clients
    for(var i = 0; i &lt; ds_list_size(list_PlayersTurn); i ++)
    {
        var sock = ds_list_find_value(list_PlayersTurn,i);
        
        buffer_seek(buffer, buffer_seek_start, 0);
        buffer_write(buffer, buffer_string, "PreGame - To Client");
        buffer_write(buffer, buffer_string, "Load Game Room");
        network_send_packet(sock, buffer, buffer_tell(buffer));
    }
    
    // Send previous data to the server
    //buffer_seek(obj_Client.buffer, buffer_seek_start, 0);
    //buffer_write(obj_Client.buffer, buffer_string, "PreGame - To Server");
    //buffer_write(obj_Client.buffer, buffer_string, "Create Initial Players On Map");
    //network_send_packet(obj_Client.client, obj_Client.buffer, buffer_tell(obj_Client.buffer));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Screen Fade

with(obj_Server)
{
    for(var i = 0; i &lt; ds_list_size(list_PlayersTurn); i ++)
    {
        var sock = ds_list_find_value(list_PlayersTurn,i);
        
        buffer_seek(buffer, buffer_seek_start, 0);
        buffer_write(buffer, buffer_string, "PreGame - To Client");
        buffer_write(buffer, buffer_string, "Create Screen Fade");
        network_send_packet(sock, buffer, buffer_tell(buffer));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send message to clients to show their Position in the Turn Queue!

with(obj_Server)
{
    for(var i = 0; i &lt; ds_list_size(list_PlayersTurn); i ++)
    {
        var sock = ds_list_find_value(list_PlayersTurn,i);
        
        buffer_seek(buffer, buffer_seek_start, 0);
        buffer_write(buffer, buffer_string, "PreGame - To Client");
        buffer_write(buffer, buffer_string, "Show Me My Position In The Turn Queue");
        buffer_write(buffer, buffer_string, string(i));
        network_send_packet(sock, buffer, buffer_tell(buffer));
    }
}

// Create Fade
alarm[9] = room_speed * 2;

// Load Next Room
alarm[10] = room_speed * 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
